"""
                                Задача методы и классы:
Необходимо дополнить класс House следующими специальными методами:
__len__(self) - должен возвращать кол-во этажей здания self.number_of_floors.
__str__(self) - должен возвращать строку: "Название: <название>, кол-во этажей: <этажи>".
                                       Задача "Нужно больше этажей":
Для решения этой задачи будем пользоваться решением к предыдущей задаче "Специальные методы класса".

Необходимо дополнить класс House следующими специальными методами:
__eq__(self, other) - должен возвращать True, если количество этажей одинаковое у self и у other.
Методы __lt__(<), __le__(<=), __gt__(>), __ge__(>=), __ne__(!=) должны присутствовать в классе и возвращать результаты сравнения по соответствующим операторам. Как и в методе __eq__ в сравнении участвует кол-во этажей.
__add__(self, value) - увеличивает кол-во этажей на переданное значение value, возвращает сам объект self.
__radd__(self, value), __iadd__(self, value) - работают так же как и __add__ (возвращают результат его вызова).
Остальные методы арифметических операторов, где self - x, other - y:

Следует заметить, что other может быть не только числом, но и вообще любым объектом другого класса.
Для более точной логики работы методов __eq__, __add__  и других методов сравнения и арифметики перед выполняемыми действиями лучше убедиться в принадлежности к типу при помощи функции isinstance:
isinstance(other, int) - other указывает на объект типа int.
isinstance(other, House) - other указывает на объект типа House.

"""


class House:
    def __init__(self, name, number_of_floors):
        self.name = name
        self.number_of_floors = number_of_floors

    def __len__(self):
        return self.number_of_floors #Возращаем количество этажей здания(self.number_of_floors)

    def __str__(self):
        return f'Название:{self.name},количество этажей:{self.number_of_floors}' #должен возвращать строку: "Название: <название>, кол-во этажей: <этажи>".

    def __eq__(self, other): #__eq__(self, other) — определяет поведение оператора «равенства», ==.
        if isinstance(other.number_of_floors, int) and (other, House):# Указываем на number_of_floor тип int, указаывает на обьект типа House
            return self.number_of_floors == other.number_of_floors

    def __lt__(self, other): #__lt__(self, other) — определяет поведение оператора сравнения «меньше», <.
        if isinstance(other.number_of_floors, int) and (other, House): # Указываем на number_of_floor тип int, указаывает на обьект типа House
            return self.number_of_floors < other.number_of_floors

    def __le__(self, other): #__le__(self, other) — определяет поведение оператора сравнения «меньше или равно», <=.
        if isinstance(other.number_of_floors, int) and (other, House):# Указываем на number_of_floor тип int, указаывает на обьект типа House
            return self.number_of_floors <= other.number_of_floors

    def __gt__(self, other):#__gt__(self, other) — определяет поведение оператора сравнения «больше», >.
        if isinstance(other.number_of_floors, int) and (other, House):# Указываем на number_of_floor тип int, указаывает на обьект типа House
            return self.number_of_floors > other.number_of_floors

    def __ge__(self, other):#__ge__(self, other) — определяет поведение оператора сравнения «больше или равно», >=.
        if isinstance(other.number_of_floors, int) and (other, House):# Указываем на number_of_floor тип int, указаывает на обьект типа House
            return self.number_of_floors >= other.number_of_floors

    def __ne__(self, other):#__ne__(self, other) — определяет поведение оператора «неравенства», !=.
        if isinstance(other.number_of_floors, int) and (other, House):# Указываем на number_of_floor тип int, указаывает на обьект типа House
            return self.number_of_floors != other.number_of_floors

    def __add__(self, vallue):#сложение, оператор +
        if isinstance(vallue, int): #Проверяем являеться ли тип (vallue,int(integer))-целочисленное число
            self.number_of_floors = self.number_of_floors + vallue #Cкладываем self.number_of_floor c vallue
            return self #Возращаем self

    def __iadd__(self, vallue): # __iadd__(self, other) — сложение с присваиванием, оператор +=
        if isinstance(vallue, int):##Проверяем являеться ли тип (vallue,int(integer))-целочисленное число
            self.number_of_floors += vallue #Складываем или присваиваем self.number_of_floors c vallue
            return self #Возращаем self

    def __radd__(self, vallue): #__radd__(self, other) — сложение, оператор +
        return self.__add__(vallue) #Возращаем результат вызова


h1 = House('ЖК Эльбрус', 10)
h2 = House('ЖК Акация', 20)
print(h1)
print(h2)

print(h1 == h2)  # __eq__

h1 = h1 + 10  # __add__
print(h1)
print(h1 == h2)

h1 += 10  # __iadd__
print(h1)

h2 = 10 + h2 # __radd__
print(h2)

print(h1 > h2) # __gt__
print(h1 >= h2) # __ge__
print(h1 < h2) # __lt__
print(h1 <= h2) # __le__
print(h1 != h2) # __ne__
